stages:
  - cache
  - test
  - build

variables:
  IMAGE_NAME: javascriptonit/devsecops-bootcamp
  IMAGE_TAG: 0.0.1

create_cache:
  # Устанавливает зависимости проекта и кэширует их для последующего использования
  stage: cache
  image: node:18-bullseye
  script:
    - yarn install
  cache:
    key:
      files:
        - yarn.lock
    paths:
      - node_modules/
      - yarn.lock
      - .yarn
    policy: pull-push

yarn_test:
  # Запускает тесты проекта, устанавливая зависимости из кэша
  image: node:18-bullseye
  stage: test
  cache:
    key:
      files:
        - yarn.lock
    paths:
      - node_modules/
      - yarn.lock
      - .yarn
    policy: pull
  script:
    - yarn install
    - yarn test

gitleaks_check:
  # Выполняет проверку на утечки данных с помощью Gitleaks и сохраняет результаты в файл
  image: 
    name: zricethezav/gitleaks
    entrypoint: [""]
  stage: test
  script:
    - gitleaks detect --verbose --source . -f json -r gitleaks.json
  allow_failure: true
  artifacts:
    when: always
    paths: 
      - gitleaks.json

njsscan:
  # Сканирует код на наличие уязвимостей с помощью njsscan и сохраняет результаты в SARIF формате
  image: python
  stage: test
  before_script:
    - pip3 install --upgrade njsscan
  script:
    - njsscan --exit-warning . --sarif -o njsscan.sarif
  allow_failure: true
  artifacts:
    when: always
    paths: 
      - njsscan.sarif 

semgrep:
  # Запускает статический анализ кода с помощью Semgrep и сохраняет результаты в JSON формате
  image: semgrep/semgrep
  stage: test
  variables:
    SEMGREP_RULES: p/javascript
  script:
    - semgrep ci --json --output semgrep.json
  allow_failure: true
  artifacts:
    when: always
    paths: 
      - semgrep.json

retire:
  # Запускает SCA анализ зависимостей с помощью  и сохраняет результаты в  формате
  image: node:18-bullseye
  stage: test
  before_script:
    - npm install -g retire
  script:
    - retire --path . --outputformat json --outputpath retire.json
  allow_failure: true
  artifacts:
    when: always
    paths: 
      - retire.json
  cache:
    key:
      files:
        - yarn.lock
    paths:
      - node_modules/
      - yarn.lock
      - .yarn
    policy: pull-push

upload_reports:
  # Загружает отчеты о безопасности на сервер, используя результаты предыдущих проверок
  image: python:latest
  stage: test
  needs: ["gitleaks_check", "njsscan", "semgrep", "retire"]
  when: always
  before_script:
    - pip install requests
  script:
    - python3 upload-reports.py gitleaks.json
    - python3 upload-reports.py njsscan.sarif
    - python3 upload-reports.py semgrep.json
    - python3 upload-reports.py retire.json

build_image:
  image: docker:24
  stage: build
  services:
    - docker:24-dind
  before_script:
    - echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
  script:
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker push $IMAGE_NAME:$IMAGE_TAG
